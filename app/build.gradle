apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    externalNativeBuild {
        ndkBuild {
            path file('src/main/jni/Android.mk')
        }
    }

    defaultConfig {
        applicationId "com.android.music"
        minSdkVersion 27
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters  "armeabi-v7a", "x86", "x86_64", "arm64-v8a" //输出指定的三种abi体系下的so库"armeabi",只加载armabi架构（目录下）的so库，如果是别的架构，就会找不到
        }
        sourceSets{  //不配的话都会有一个默认值  可以指定哪些源文件（或文件夹下的源文件）要被编译，哪些源文件要被排除
            main{
                //jni.srcDirs = []  //禁用as自动生成mk
                jniLibs.srcDirs=['jniLibs' ] //so包就去src/main/libs目录下找
            }
        }
        packagingOptions {
            exclude 'lib/armeabi-v7a/libBlurJni.so'
            exclude 'lib/x86_64/libBlurJni.so'
            exclude 'lib/x86/libBlurJni.so'
        }

        task ndkBuild(type:Exec,description:'Compile JNI source via NDK'){
            commandLine "D:\\Code\\AndroidStudioConfig\\ndk\\21.0.6113669\\ndk-build.cmd",//配置ndk的路径
                    'NDK_PROJECT_PATH=build/intermediates/ndk',//ndk默认的生成so的文件
                    'NDK_LIBS_OUT=src/main/libs',//配置的我们想要生成的so文件所在的位置
                    'APP_BUILD_SCRIPT=src/main/jni/Android.mk',//指定项目以这个mk的方式
                    'NDK_APPLOCATION_MK=src/main/jni/Application.mk'//指定项目以这个mk的方式
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        ndkBuild {
            path file('src/main/jni/Android.mk')
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    // --------------------------- Room 数据库依赖 --------------------------- //
    implementation 'android.arch.persistence.room:runtime:1.1.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    annotationProcessor 'android.arch.persistence.room:compiler:1.1.1'
    // --------------------------- RxJava 依赖 --------------------------- //
    implementation "io.reactivex.rxjava3:rxjava:3.0.0"
    // --------------------------- RxAndroid 依赖 --------------------------- //
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    // --------------------------- Android 单元测试依赖 --------------------------- //
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    implementation 'android.arch.persistence.room:testing:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    // --------------------------- LiveData 依赖 --------------------------- //
    implementation "android.arch.lifecycle:livedata:1.1.1"
    // --------------------------- ViewModel 依赖 --------------------------- //
    implementation "android.arch.lifecycle:viewmodel:1.1.1"
    // --------------------------- Lifecycle 依赖 --------------------------- //
    implementation "android.arch.lifecycle:runtime:1.1.1"
    implementation "android.arch.lifecycle:extensions:1.1.1"
    annotationProcessor "android.arch.lifecycle:compiler:1.1.1"

}
